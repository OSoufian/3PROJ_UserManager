definitions:
  domain.Channel:
    properties:
      banner:
        type: string
      description:
        type: string
      icon:
        type: string
      id:
        type: integer
      owerId:
        type: integer
      owner:
        $ref: '#/definitions/domain.UserModel'
      socialLink:
        type: string
      subscribers:
        items:
          $ref: '#/definitions/domain.UserModel'
        type: array
    type: object
  domain.Role:
    properties:
      channel:
        $ref: '#/definitions/domain.Channel'
      channelId:
        type: integer
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      permission:
        type: integer
      user:
        items:
          $ref: '#/definitions/domain.UserModel'
        type: array
    type: object
  domain.UserModel:
    properties:
      credentials:
        items:
          $ref: '#/definitions/webauthn.Credential'
        type: array
      disable:
        type: boolean
      email:
        type: string
      icon:
        type: string
      id:
        type: integer
      incredentials:
        type: string
      password:
        type: string
      permission:
        type: integer
      role:
        items:
          $ref: '#/definitions/domain.Role'
        type: array
      subscribtion:
        items:
          $ref: '#/definitions/domain.Channel'
        type: array
      username:
        type: string
      valideAccount:
        type: boolean
    type: object
  webauthn.Authenticator:
    properties:
      aaguid:
        description: |-
          The AAGUID of the authenticator. An AAGUID is defined as an array containing the globally unique
          identifier of the authenticator model being sought.
        items:
          type: integer
        type: array
      cloneWarning:
        description: |-
          CloneWarning - This is a signal that the authenticator may be cloned, i.e. at least two copies of the
          credential private key may exist and are being used in parallel. Relying Parties should incorporate
          this information into their risk scoring. Whether the Relying Party updates the stored signature
          counter value in this case, or not, or fails the authentication ceremony or not, is Relying Party-specific.
        type: boolean
      signCount:
        description: |-
          SignCount -Upon a new login operation, the Relying Party compares the stored signature counter value
          with the new signCount value returned in the assertionâ€™s authenticator data. If this new
          signCount value is less than or equal to the stored value, a cloned authenticator may
          exist, or the authenticator may be malfunctioning.
        type: integer
    type: object
  webauthn.Credential:
    properties:
      attestationType:
        description: The attestation format used (if any) by the authenticator when
          creating the credential.
        type: string
      authenticator:
        allOf:
        - $ref: '#/definitions/webauthn.Authenticator'
        description: The Authenticator information for a given certificate
      id:
        description: A probabilistically-unique byte sequence identifying a public
          key credential source and its authentication assertions.
        items:
          type: integer
        type: array
      publicKey:
        description: |-
          The public key portion of a Relying Party-specific credential key pair, generated by an authenticator and returned to
          a Relying Party at registration time (see also public key credential). The private key portion of the credential key
          pair is known as the credential private key. Note that in the case of self attestation, the credential key pair is also
          used as the attestation key pair, see self attestation for details.
        items:
          type: integer
        type: array
    type: object
info:
  contact: {}
paths:
  /:
    get:
      consumes:
      - '*/*'
      description: get the status of server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Show the status of server.
      tags:
      - root
  /:name:
    get:
      description: get any permissions every where
      responses:
        "200":
          description: OK
          schema:
            type: Permissions
        "404":
          description: Not Found
      summary: get permissions
      tags:
      - Perms
  /channels/:channId:
    delete:
      description: get channel by id
      responses:
        "200":
          description: OK
          schema:
            type: Channels
        "404":
          description: Not Found
      summary: get channel
      tags:
      - Channels
    get:
      description: get channel by id
      responses:
        "200":
          description: OK
          schema:
            type: Channels
        "404":
          description: Not Found
      summary: get channel
      tags:
      - Channels
    patch:
      description: get channel by id
      responses:
        "200":
          description: OK
          schema:
            type: Channels
        "404":
          description: Not Found
      summary: get channel
      tags:
      - Channels
    put:
      description: get channel by id
      responses:
        "200":
          description: OK
          schema:
            type: Channels
        "404":
          description: Not Found
      summary: get channel
      tags:
      - Channels
  /login/end/:username:
    post:
      description: end the webauthn login and update the user to session and database
      responses:
        "200":
          description: OK
          schema:
            type: JWTtoken
        "404":
          description: Not Found
      summary: end Login
      tags:
      - Logins
  /login/password/:username:
    post:
      description: set a password login for users
      responses:
        "200":
          description: OK
          schema:
            type: JWTtoken
        "404":
          description: Not Found
      summary: password Login
      tags:
      - Logins
  /login/start/:username:
    post:
      description: begin the webauthn login and update the user credential to session
        and database
      responses:
        "200":
          description: OK
          schema:
            type: Options
        "404":
          description: Not Found
      summary: begin Login
      tags:
      - Logins
  /perms:
    get:
      description: get any permissions every where
      responses:
        "200":
          description: OK
          schema:
            type: Permissions
        "404":
          description: Not Found
      summary: get permissions
      tags:
      - Perms
  /register/end/:username:
    post:
      description: end the webauthn registration and update the user to session and
        database
      responses:
        "200":
          description: OK
          schema:
            type: JWTtoken
        "404":
          description: Not Found
      summary: end Registration
      tags:
      - Registrations
  /register/password/:username:
    post:
      description: set a password registration for users
      responses:
        "200":
          description: OK
          schema:
            type: JWTtoken
        "404":
          description: Not Found
      summary: password Registration
      tags:
      - Registrations
  /register/start/:username:
    post:
      description: begin the webauthn registration and save the user to session and
        database
      responses:
        "200":
          description: OK
          schema:
            type: Options
        "404":
          description: Not Found
      summary: begin Registration
      tags:
      - Registrations
  /roles/:
    delete:
      description: delete a role
      responses:
        "200":
          description: OK
          schema:
            type: Role
        "404":
          description: Not Found
      summary: delete a role
      tags:
      - Roles
    get:
      description: Get all roles from a channel Id
      responses:
        "200":
          description: OK
          schema:
            type: Role
        "404":
          description: Not Found
      summary: get Roles
      tags:
      - Roles
    patch:
      description: edit a role
      responses:
        "200":
          description: OK
          schema:
            type: Role
        "404":
          description: Not Found
      summary: patch a role
      tags:
      - Roles
    put:
      description: create a role for a specify channel
      responses:
        "200":
          description: OK
          schema:
            type: Role
        "404":
          description: Not Found
      summary: Create a role
      tags:
      - Roles
  /roles/:roleId:
    get:
      description: Get a specific role by an Id
      responses:
        "200":
          description: OK
          schema:
            type: Role
        "404":
          description: Not Found
      summary: get Role
      tags:
      - Roles
    post:
      description: add or remove a bulk of user roles
      responses:
        "200":
          description: OK
          schema:
            type: Role
        "404":
          description: Not Found
      summary: add or remove user
      tags:
      - Roles
  /user:
    delete:
      description: delete user account
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.UserModel'
            type: array
        "404":
          description: Not Found
          schema:
            type: nil
      summary: delete account
      tags:
      - Users
    get:
      description: get all information about me
      responses:
        "200":
          description: OK
          schema:
            type: UserModel
        "404":
          description: Not Found
      summary: Get about me
      tags:
      - Users
    patch:
      description: edit user information
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.UserModel'
            type: array
        "404":
          description: Not Found
          schema:
            type: nil
      summary: edit user
      tags:
      - Users
  /user/cred:
    delete:
      description: delete webauthn credential
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.UserModel'
            type: array
        "404":
          description: Not Found
          schema:
            type: nil
      summary: delete credential
      tags:
      - Users
  /user/logout:
    get:
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.UserModel'
            type: array
        "404":
          description: Not Found
          schema:
            type: nil
      summary: Just Logout
      tags:
      - Users
  /user/role/:roleId:
    post:
      description: add or remove roles to user
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.UserModel'
            type: array
        "404":
          description: Not Found
          schema:
            type: nil
      summary: roles
      tags:
      - Users
  /user/subscribe/:channId:
    post:
      description: Subscribe to a channel
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.UserModel'
            type: array
        "404":
          description: Not Found
          schema:
            type: nil
      summary: Subscribe
      tags:
      - Users
swagger: "2.0"
